---
- name: Get existing Kyverno pods
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - "app.kubernetes.io/part-of=kyverno"
  register: kyverno_pods

- name: Set path fact
  ansible.builtin.set_fact:
    path: "{{ role_path + '/templates/values' }}"

- name: Compute Kyverno Helm values
  ansible.builtin.include_role:
    name: combine
  vars:
    combine_path: "{{ path }}"
    combine_user_values: "{{ dsc.kyverno['values'] }}"
    combine_dest_var: "kyverno_values"

- name: Install Kyverno
  when: >
    kyverno_pods.resources | length == 0 or
    dsc.kyverno.forcedInstall
  block:
    - name: Add helm repo
      kubernetes.core.helm_repository:
        name: kyverno
        repo_url: "{{ dsc.kyverno.helmRepoUrl }}"
        force_update: true

    - name: Deploy helm
      kubernetes.core.helm:
        name: kyverno
        chart_ref: kyverno/kyverno
        chart_version: "{{ dsc.kyverno.chartVersion }}"
        release_namespace: "{{ dsc.kyverno.namespace }}"
        create_namespace: true
        values: "{{ kyverno_values }}"

    - name: Set alerting rules
      when: dsc.global.alerting.enabled
      kubernetes.core.k8s:
        template: prometheusrule.yml.j2

    - name: Wait Kyverno service endpoint to be available
      kubernetes.core.k8s_info:
        kind: Endpoints
        namespace: "{{ dsc.kyverno.namespace }}"
        name: kyverno-svc
      register: endpoint
      until: endpoint.resources[0].subsets[0].addresses[0] is defined
      retries: 45
      delay: 20

- name: Get dsc namespaces but not Kyverno's
  ansible.builtin.set_fact:
    dsc_namespaces: "{{ dsc
      | dict2items
      | map(attribute='value')
      | selectattr('namespace', 'defined')
      | map(attribute='namespace')
      | reject('equalto', dsc.kyverno.namespace)
      }}"

- name: Check replace-kubed ClusterPolicy
  kubernetes.core.k8s_info:
    kind: ClusterPolicy
    name: replace-kubed
  register: replace_kubed_cp

- name: Create replace-kubed ClusterPolicy
  when: replace_kubed_cp.resources | length == 0
  kubernetes.core.k8s:
    template: replace-kubed.yml.j2

- name: Check security-context ClusterPolicy
  kubernetes.core.k8s_info:
    kind: ClusterPolicy
    name: security-context-dso
  register: security_context_cp

- name: Create security-context ClusterPolicy for cis profile
  when: >
    dsc.global.profile is defined and
    dsc.global.profile == "cis" and
    security_context_cp.resources | length == 0
  kubernetes.core.k8s:
    template: cis.yml.j2

- name: Check exposed-ca ClusterPolicy
  kubernetes.core.k8s_info:
    kind: ClusterPolicy
    name: exposed-ca-dso-gitlab-runner
  register: exposed_ca_cp

- name: Create ClusterPolicy for exposedCA
  when: >
    exposed_ca_cp.resources | length == 0 and
    (dsc.exposedCA.type == "configmap" or
    dsc.exposedCA.type == "secret")
  kubernetes.core.k8s:
    template: exposedCA.yml.j2
