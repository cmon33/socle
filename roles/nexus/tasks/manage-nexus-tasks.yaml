- name: Get Clean_Docker_unused_stuff_task script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/Clean_Docker_unused_stuff_task.groovy
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
  register: clean_docker_unused_stuff_task_script
  ignore_errors: true

- name: Add Clean_Docker_unused_stuff_task script
  when: clean_docker_unused_stuff_task_script.status != 200
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      name: Clean_Docker_unused_stuff_task.groovy
      content: |
        import org.sonatype.nexus.blobstore.api.BlobStoreManager
        import org.sonatype.nexus.scheduling.TaskConfiguration
        import org.sonatype.nexus.scheduling.TaskScheduler
        import org.sonatype.nexus.scheduling.schedule.Cron

        def createCleanDockerUnusedStuffTask(TaskScheduler taskScheduler) {
            TaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance("repository.docker.gc")
            taskConfiguration.name = "Clean Docker unused stuff"

            taskConfiguration.setString("repositoryName", "dso-dockerhub-proxy")
            taskConfiguration.setString("deployOffset", "24")
            // TODO: taskConfiguration.setAlertEmail("TODO")
            taskScheduler.scheduleTask(
                taskConfiguration,
                new Cron(new Date().next(), "0 30 0 * * ?")
            )
            log.info("Task ${taskConfiguration.name} created")
        }

        TaskScheduler taskScheduler = container.lookup(TaskScheduler.class)

        createCleanDockerUnusedStuffTask(taskScheduler)
      type: "groovy"
    body_format: json
    status_code: [204]

- name: Run Clean_Docker_unused_stuff_task script
  when: Clean_Docker_unused_stuff_task == 'missing'
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/Clean_Docker_unused_stuff_task.groovy/run
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body: {}
    body_format: json
    status_code: [200]

- name: Get Clean_Docker_uploads_task script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/Clean_Docker_uploads_task.groovy
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
  register: Clean_Docker_uploads_task_script
  ignore_errors: true

- name: Add Clean_Docker_uploads_task script
  when: Clean_Docker_uploads_task_script.status != 200
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      name: Clean_Docker_uploads_task.groovy
      content: |
        import org.sonatype.nexus.blobstore.api.BlobStoreManager
        import org.sonatype.nexus.scheduling.TaskConfiguration
        import org.sonatype.nexus.scheduling.TaskScheduler
        import org.sonatype.nexus.scheduling.schedule.Cron

        def createCleanDockerUploadsTask(TaskScheduler taskScheduler) {
            TaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance("repository.docker.upload-purge")
            taskConfiguration.name = "Clean Docker uploads"

            taskConfiguration.setString("age", "24")
            // TODO: taskConfiguration.setAlertEmail("TODO")
            taskScheduler.scheduleTask(
                taskConfiguration,
                new Cron(new Date().next(), "0 20 0 * * ?")
            )
            log.info("Task ${taskConfiguration.name} created")
        }

        TaskScheduler taskScheduler = container.lookup(TaskScheduler.class)

        createCleanDockerUploadsTask(taskScheduler)
      type: "groovy"
    body_format: json
    status_code: [204]

- name: Run Clean_Docker_uploads_task script
  when: Clean_Docker_uploads_task == 'missing'
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/Clean_Docker_uploads_task.groovy/run
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body: {}
    body_format: json
    status_code: [200]

- name: Get Compact_DSO_Blob_Store_task script
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/Compact_DSO_Blob_Store_task.groovy
    method: GET
    user: admin
    password: "{{ nexus_admin_password }}"
  register: Compact_DSO_Blob_Store_task_script
  ignore_errors: true

- name: Add Compact_DSO_Blob_Store_task script
  when: Compact_DSO_Blob_Store_task_script.status != 200
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body:
      name: Compact_DSO_Blob_Store_task.groovy
      content: |
        import org.sonatype.nexus.blobstore.api.BlobStoreManager
        import org.sonatype.nexus.scheduling.TaskConfiguration
        import org.sonatype.nexus.scheduling.TaskScheduler
        import org.sonatype.nexus.scheduling.schedule.Cron

        def createCompactDSOBlobstoreTask(TaskScheduler taskScheduler) {
            TaskConfiguration taskConfiguration = taskScheduler.createTaskConfigurationInstance("blobstore.compact")
            taskConfiguration.name = "Compact DSO Blob Store"

            taskConfiguration.setString("blobstoreName", "dso")
            // TODO: taskConfiguration.setAlertEmail("TODO")
            taskScheduler.scheduleTask(
                taskConfiguration,
                new Cron(new Date().next(), "0 10 1 * * ?")
            )
            log.info("Task ${taskConfiguration.name} created")
        }

        TaskScheduler taskScheduler = container.lookup(TaskScheduler.class)

        createCompactDSOBlobstoreTask(taskScheduler)
      type: "groovy"
    body_format: json
    status_code: [204]

- name: Run Compact_DSO_Blob_Store_task script
  when: Compact_DSO_Blob_Store_task == 'missing'
  ansible.builtin.uri:
    validate_certs: "{{ dsc.exposedCA.type == 'none' }}"
    force_basic_auth: true
    url: https://{{ nexus_domain }}/service/rest/v1/script/Compact_DSO_Blob_Store_task.groovy/run
    method: POST
    user: admin
    password: "{{ nexus_admin_password }}"
    body: {}
    body_format: json
    status_code: [200]
